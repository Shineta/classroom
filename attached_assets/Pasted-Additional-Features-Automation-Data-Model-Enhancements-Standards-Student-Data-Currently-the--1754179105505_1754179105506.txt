Additional Features & Automation
Data Model Enhancements (Standards & Student Data): Currently, the observation schema doesn’t capture specific curriculum standards or student counts – it focuses on pedagogical aspects (engagement, climate, etc.)
GitHub
GitHub
. To meet the requirement of tracking what content was taught and which standards were addressed, we should extend the model. Possible approaches:
Standards Tracking: Introduce a new field or related table for standards observed. This could be a multi-select in the UI where the observer chooses from a list of state standards (or CSP principles) relevant to that lesson. For example, a field standardsCovered: string[] could store an array of standard codes or descriptions. In the database, this might be a JSONB array or a separate join table if we want a normalized Standards reference list. Initially, a simple solution is a text array on the walkthrough (for flexibility, since standards can vary by subject). This allows leadership to query, say, “how many times was Standard Math.5 covered?”. Over time, we could integrate a standards directory for easier selection (e.g., pre-populate a dropdown with all Missouri Math standards, etc.).
Lesson Content Description: We already have “Lesson Objective” and “Subject” fields which partly describe what was taught
GitHub
. We might add a field for “Lesson Topics” or “Summary of content” if more detail is needed beyond the objective. However, often the objective suffices to infer standards if written clearly. We could encourage observers to paste the objective or even the standard code into that field for now. Eventually, a dedicated field or an AI that suggests likely standards from the objective text could be useful (see Automation below).
Student Count: Add a field to record how many students were present or the class size. This can simply be an integer (e.g., numStudents) on the walkthrough. Observers can enter it manually during the observation. If integrated with Google Classroom rosters, we could default this to the enrollment number or allow the observer to adjust if some students were absent. Knowing the number of students helps contextualize the observation (e.g., engagement strategies might differ in a class of 30 vs 5).
Growth Tracking: Implement features to explicitly track teacher growth over time. One idea is to link observations in a sequence – for instance, if an observer notes an “area for growth” for a teacher, the next observation form could prompt the observer to check if that area was addressed. We can include a question in the walkthrough form like “Was progress made on previous feedback? (if applicable)” or have the system automatically compare text: if the same teacher had a prior walkthrough with certain “areasForGrowth”, highlight those for the next observer or coach. A simpler approach is building a Teacher Dashboard (for leadership or coaches) that shows all observations of a given teacher in chronological order, making it easy to see changes. The data model already links walkthroughs to teachers
GitHub
, so we can query by teacher ID. Graphs of a teacher’s ratings over time (e.g., engagement level trend) or word clouds of feedback given could be presented to visualize growth. Expanded Analytics and Reporting: Beyond the leadership dashboard, consider automated report generation. For example, a monthly summary email to leadership with key stats (“10 walkthroughs completed this month; 3 follow-ups pending; common growth area: ‘classroom management’”). This kind of automation keeps stakeholders informed without needing to log in. Also, providing the ability to export data (CSV of all observation records, or a formatted PDF of a subset of reports) can help in meetings and compliance documentation. The system’s current functionality for printing individual reports is a start
GitHub
GitHub
, but bulk export would save time. Integration with Google Classroom and Others: Since the user specifically mentioned Google Classroom integration, we should plan for data exchange there. Initial integrations might include:
Class Rosters & Courses: Allow the admin to import teacher and class lists from Google Classroom. This could automatically create Teacher entries (with name, email) and perhaps Location entries (if we treat each Google Classroom course as a “location” or attach it to a location). At minimum, we could fetch class names and student counts for observers to select. For instance, when scheduling or documenting an observation, instead of manually typing number of students or the course, the observer could select the teacher’s Google Classroom course and the system knows “Period 2 – Algebra II – 25 students”. This would populate the relevant fields.
Lesson Plans & Materials: Many teachers use Google Drive or Classroom to share lesson plans. We could integrate a feature where an observer, when filling “Lesson Plan URL”
GitHub
, can choose to attach a file from Google Drive (via the Drive Picker API) or at least paste a link to a Google Doc. The backend’s object storage logic is currently set up to handle file uploads and protect them
GitHub
GitHub
. Using Google’s APIs might simplify this: rather than uploading the file to our server, just store the link with proper access. In the future, we might even use the Google Classroom API to fetch assignments or curriculum info for that day’s lesson to cross-reference with the observation.
Calendar Integration: Observers might schedule walkthroughs via Google Calendar. Integration could allow an observer (or admin) to see a teacher’s schedule or add an event for the observation. While not critical, it can be a convenient feature that ensures the teacher knows an observer is coming (if it’s not supposed to be unannounced).
Other Platforms: In anticipation of other integrations (Canvas, Schoology, etc.), we should modularize the integration layer. For example, define an interface for “Class Data Provider” so we can plug in Google Classroom now and others later. The user indicated more integrations may be added, so designing with that in mind (perhaps a settings page where admin can connect different services) is wise.
Enhanced Automation with AI: Beyond generating feedback text, we could employ AI to assist in other ways. For instance, given the lesson objective or a transcript of the class, an AI service could suggest which standards likely apply. OpenAI or a similar service could be prompted with the objective to output relevant standard codes (if we provide it with the standards list to choose from). Another use-case: analyzing the collection of walkthrough data to find patterns – e.g., use AI to summarize “common strengths” across a department or to flag outlier classes (maybe an unusually low engagement score might trigger a gentle alert). These are advanced features, but even in the near term, an AI-based helper for observers (“AI Insights” that complements the observer’s notes with an objective summary) could save time. The current AIService already sets a foundation for this kind of functionality
GitHub
GitHub
. We would need to be mindful of accuracy and always allow human override, but as an advisory tool it can be powerful. 